<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Restapi extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
		$this->load->model('Restapimodel');
		$this->load->model('Adminmodel');
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = $this->Restapimodel->users();

        $id = $this->get('id');
        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;
		
        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['UserID']) && $value['UserID'] == $id)
                {
                    $user = $value;
                }
            }
        }
        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
		//echo isset($_POST['UserID']);
		if(!isset($_POST['UserID']) || !isset($_POST['Name']) || !isset($_POST['IsActive']) || !isset($_POST['Email'])){
			$message = [
            'UserID' => $this->post('UserID'), 
            'Name' => $this->post('Name'),
            'Email' => $this->post('Email'),
			'IsActive' => $this->post('IsActive'),
            'message' => 'Please pass the valid parameters'
        ];

			$this->set_response($message, REST_Controller::HTTP_BAD_REQUEST); // 
			
		
		
        // $this->some_model->update_user( ... );
		}elseif($this->Adminmodel->email_check()=='false'){
			$message = [
            'UserID' => $this->post('UserID'),
            'Name' => $this->post('Name'),
            'Email' => $this->post('Email'),
			'IsActive' => $this->post('IsActive'),
            'message' => 'Email already exist'
        ];

			$this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
		}else{
			$id=$this->Restapimodel->users_update();
        $message = [
            'UserID' => $id, // Automatically generated by the model
            'Name' => $this->post('Name'),
            'Email' => $this->post('Email'),
			'IsActive' => $this->post('IsActive'),
            'message' => 'Added a Users'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
		}
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');
		
        // Validate the id.
        if ($id <= 0)
        {
			$message = [            
            'message' => 'Please pass the valid parameters'
			];
            // Set the response and exit
            $this->response($message, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
		$this->Restapimodel->users_delete($id);
        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // NO_CONTENT (204) being the HTTP response code
    }
	
	public function devices_get()
    {
        // devices from a data store e.g. database
        $devices = $this->Restapimodel->devices();

        $id = $this->get('id');
        // If the id parameter doesn't exist return all the devices

        if ($id === NULL)
        {
            // Check if the devices data store contains devices (in case the database result returns NULL)
            if ($devices)
            {
                // Set the response and exit
                $this->response($devices, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No devices were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular device.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the device from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($devices))
        {
            foreach ($devices as $key => $value)
            {
                if (isset($value['ID']) && $value['ID'] == $id)
                {
                    $device = $value;
                }
            }
        }

        if (!empty($device))
        {
            $this->set_response($device, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'device could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function devices_post()
    {
		if(!isset($_POST['ID']) || !isset($_POST['DeviceID']) || !isset($_POST['DeviceLabel']) || !isset($_POST['ReportedOn'])){
			$message = [
            'ID' => $this->post('ID'), 
            'DeviceID' => $this->post('DeviceID'),
            'DeviceLabel' => $this->post('DeviceLabel'),
			'ReportedOn' => $this->post('ReportedOn'),
            'message' => 'Please pass the valid parameters'
        ];

			$this->response($message, REST_Controller::HTTP_BAD_REQUEST); // 
			
		}elseif($this->Adminmodel->deviceid_check()=='false'){
			 $message = [
            'ID' => $this->post('ID'), // Automatically generated by the model
            'DeviceID' => $this->post('DeviceID'),
            'DeviceLabel' => $this->post('DeviceLabel'),
			'ReportedOn' => $this->post('ReportedOn'),
            'message' => 'Device ID Already Exist'
        ];
		
			$this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
		}else{
			$id=$this->Restapimodel->devices_update();
			// $this->some_model->update_user( ... );
			$message = [
				'ID' => $id, // Automatically generated by the model
				'DeviceID' => $this->post('DeviceID'),
				'DeviceLabel' => $this->post('DeviceLabel'),
				'ReportedOn' => $this->post('ReportedOn'),
				'message' => 'Added a resource'
			];
			
			$this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
		}
    }

    public function devices_delete()
    {
        $id = (int) $this->get('id');
		
        // Validate the id.
        if ($id <= 0)
        {
			$message = [            
            'message' => 'Please pass the valid parameters'
        ];
            // Set the response and exit
            $this->response($message, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
		$this->Restapimodel->devices_delete($id);
        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // NO_CONTENT (204) being the HTTP response code
    }

}
